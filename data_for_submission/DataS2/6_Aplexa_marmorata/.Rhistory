data$DM_PRESENT <- factor(data$DM_PRESENT)
data$total <- rowSums(data[,7:21])
#community biomass vector N
N <- array(NA,dim=c(length(levels(data$MESOCOSM)),length(levels(as.factor(data$jday)))),dimnames=list(levels(data$MESOCOSM),levels(as.factor(data$jday))))
for(i in 1:length(levels(data$MESOCOSM))){
N[i,] <- data$total[data$MESOCOSM==levels(data$MESOCOSM)[i]]
}
ecofun1 <- gam_alpha_CV(N)
ecofun2 <- space_var(N)
ecofun3 <- comm_var(data)
ecofun4 <- pairwise_rhoP_beta(N)
#bootstrap values
niter <- 1000
b_ecofun1 <- array(NA,dim=c(niter,4),dimnames=list(NULL,c("gam_CV","alpha_CV","beta1","beta2")))
b_ecofun2 <- array(NA,dim=c(niter,4),dimnames=list(NULL,c("CVS2","CVS2_uneven","CVS2_asyn","phi")))
for(i in 1:niter){
print(i)
new <- sample(1:dim(N)[1],dim(N)[1],replace=T)
new <- N[new,]
b_ecofun1[i,] <- unlist(gam_alpha_CV(new))
b_ecofun2[i,] <- unlist(space_var(new))[1:4]
}
#jackknife values
j_ecofun1 <- array(NA,dim=c(dim(N)[1],4),dimnames=list(NULL,c("gam_CV","alpha_CV","beta1","beta2")))
j_ecofun2 <- array(NA,dim=c(dim(N)[1],4),dimnames=list(NULL,c("CVS2","CVS2_uneven","CVS2_asyn","phi")))
for(i in 1:dim(N)[1]){
new_j <- N[-i,]
j_ecofun1[i,] <- unlist(gam_alpha_CV(new_j))
j_ecofun2[i,] <- unlist(space_var(new_j))[1:4]
}
colMeans(j_ecofun2)
colMeans(j_ecofun1)
colMeans(j_ecofun2)
c(ecofun2$CVS2,ecofun2$CVS2_asyn,ecofun2$CVS2_uneven,ecofun2$phi)
c(quantile(b_ecofun2[,1],c(.025,.975)),quantile(b_ecofun2[,2],c(.025,.975)),quantile(b_ecofun2[,3],c(.025,.975)),quantile(b_ecofun2[,4],c(.025,.975)))
colMeans(j_ecofun2)
c(ecofun2$CVS2,ecofun2$CVS2_asyn,ecofun2$CVS2_uneven,ecofun2$phi)
c(quantile(b_ecofun2[,1],c(.025,.975)),quantile(b_ecofun2[,2],c(.025,.975)),quantile(b_ecofun2[,3],c(.025,.975)),quantile(b_ecofun2[,4],c(.025,.975)))
colMeans(j_ecofun2)
####Analysis 2: variability in STRESS communities
data <- subset[subset$TREATMENT_INFO=="STRESS",]
data <- data[data$DM_PRESENT != "CONT",]  #Eliminate Pond 5 and 12, where D. magna were observed in mesocosms stocked from "no D. magna" ponds
data$MESOCOSM <- factor(data$MESOCOSM)
data$DM_PRESENT <- factor(data$DM_PRESENT)
data$total <- rowSums(data[,7:21])
#community biomass vector N
N <- array(NA,dim=c(length(levels(data$MESOCOSM)),length(levels(as.factor(data$jday)))),dimnames=list(levels(data$MESOCOSM),levels(as.factor(data$jday))))
for(i in 1:length(levels(data$MESOCOSM))){
n <- length(data$total[data$MESOCOSM==levels(data$MESOCOSM)[i]])
if(n < dim(N)[2]){
days <- data$jday[data$MESOCOSM==levels(data$MESOCOSM)[i]]
for(b in 1:length(days)){
N[i,colnames(N)==days[b]] <- data$total[data$MESOCOSM==levels(data$MESOCOSM)[i]][b]
}
}
else{N[i,1:n] <- data$total[data$MESOCOSM==levels(data$MESOCOSM)[i]]}
}
stress1 <- gam_alpha_CV(N)
stress2 <- space_var(N)
stress3 <- comm_var(data)
stress4 <- pairwise_rhoP_beta(N)
#bootstrap values
niter <- 1000
b_stress1 <- array(NA,dim=c(niter,4),dimnames=list(NULL,c("gam_CV","alpha_CV","beta1","beta2")))
b_stress2 <- array(NA,dim=c(niter,4),dimnames=list(NULL,c("CVS2","CVS2_uneven","CVS2_asyn","phi")))
for(i in 1:niter){
print(i)
new <- sample(1:dim(N)[1],dim(N)[1],replace=T)
new <- N[new,]
b_stress1[i,] <- unlist(gam_alpha_CV(new))
b_stress2[i,] <- unlist(space_var(new))[1:4]
}
#jackknife values
j_stress1 <- array(NA,dim=c(dim(N)[1],4),dimnames=list(NULL,c("gam_CV","alpha_CV","beta1","beta2")))
j_stress2 <- array(NA,dim=c(dim(N)[1],4),dimnames=list(NULL,c("CVS2","CVS2_uneven","CVS2_asyn","phi")))
for(i in 1:dim(N)[1]){
new_j <- N[-i,]
j_stress1[i,] <- unlist(gam_alpha_CV(new_j))
j_stress2[i,] <- unlist(space_var(new_j))[1:4]
}
c(stress1$gam_CV,stress1$alpha_CV,stress1$beta1,stress1$beta2)
c(quantile(b_stress1[,1],c(.025,.975)),quantile(b_stress1[,2],c(.025,.975)),quantile(b_stress1[,3],c(.025,.975)),quantile(b_stress1[,4],c(.025,.975)))
colMeans(j_stress1)
c(stress2$CVS2,stress2$CVS2_asyn,stress2$CVS2_uneven,stress2$phi)
c(quantile(b_stress2[,1],c(.025,.975)),quantile(b_stress2[,2],c(.025,.975)),quantile(b_stress2[,3],c(.025,.975)),quantile(b_stress2[,4],c(.025,.975)))
colMeans(j_stress2)
j_ecofun1
y_min <- 0
y_max <- 6
plot(c(unlist(ecofun1),unlist(stress1)),ylim=c(y_min,y_max),xlim=c(0,5),type="n",axes=F,xlab="",ylab="")
axis(1, at=c(1,2,3,4), labels=c("gam_CV","alpha_CV","beta1","beta2"))
axis(2, at=c(1,2,3,4,5,6))
points(1:4,unlist(ecofun1), pch=1, col="black",cex=2)
points(c(1.3,2.3,3.3,4.3),unlist(stress1), pch=19, col="black",cex=2)
arrows(1:4,unlist(ecofun1),1:4,c(unlist(ecofun1)[1]+j_ecofun1[,1],unlist(ecofun1)[2]+j_ecofun1[,2],unlist(ecofun1)[3]+j_ecofun1[,3],unlist(ecofun1)[4]+j_ecofun1[,4]),length=0.05, angle=90, code=2)
unlist(ecofun1)[1]
j_ecofun1[,1]
unlist(ecofun1)
unlist(ecofun1)[1]
y_min <- 0
y_max <- 6
plot(c(unlist(ecofun1),unlist(stress1)),ylim=c(y_min,y_max),xlim=c(0,5),type="n",axes=F,xlab="",ylab="")
axis(1, at=c(1,2,3,4), labels=c("gam_CV","alpha_CV","beta1","beta2"))
axis(2, at=c(1,2,3,4,5,6))
points(1:4,unlist(ecofun1), pch=1, col="black",cex=2)
points(c(1.3,2.3,3.3,4.3),unlist(stress1), pch=19, col="black",cex=2)
arrows(1:4,unlist(ecofun1),1:4,c(unlist(ecofun1)[1]+(abs(unlist(ecofun1)[1]-j_ecofun1[,1])),unlist(ecofun1)[2]+(abs(unlist(ecofun1)[2]-j_ecofun1[,2])),unlist(ecofun1)[3]+(abs(unlist(ecofun1)[3]-j_ecofun1[,3])),unlist(ecofun1)[4]+(abs(unlist(ecofun1)[4]-j_ecofun1[,4]))),length=0.05, angle=90, code=2)
abs(unlist(ecofun1)[1]-j_ecofun1[,1])
plot(c(unlist(ecofun1),unlist(stress1)),ylim=c(y_min,y_max),xlim=c(0,5),type="n",axes=F,xlab="",ylab="")
#axis(2, at=c)
axis(1, at=c(1,2,3,4), labels=c("gam_CV","alpha_CV","beta1","beta2"))
axis(2, at=c(1,2,3,4,5,6))
#ECOFUN
points(1:4,unlist(ecofun1), pch=1, col="black",cex=2)
#STRESS
points(c(1.3,2.3,3.3,4.3),unlist(stress1), pch=19, col="black",cex=2)
arrows(1:4,unlist(ecofun1),1:4,c(unlist(ecofun1)[1]+(abs(unlist(ecofun1)[1]-mean(j_ecofun1[,1]))),unlist(ecofun1)[2]+(abs(unlist(ecofun1)[2]-mean(j_ecofun1[,2]))),unlist(ecofun1)[3]+(abs(unlist(ecofun1)[3]-mean(j_ecofun1[,3]))),unlist(ecofun1)[4]+(abs(unlist(ecofun1)[4]-mean(j_ecofun1[,4])))),length=0.05, angle=90, code=2)
y_min <- min(c(min(b_ecofun1),min(b_stress1)))
y_max <- max(c(max(b_ecofun1),max(b_stress1)))
y_min <- min(c(min(b_ecofun1),min(b_stress1)))
y_max <- max(c(max(b_ecofun1),max(b_stress1)))
plot(c(unlist(ecofun1),unlist(stress1)),ylim=c(y_min,y_max),xlim=c(0,5),type="n",axes=F,xlab="",ylab="")
axis(1, at=c(1,2,3,4), labels=c("gam_CV","alpha_CV","beta1","beta2"))
axis(2, at=c(1,2,3,4,5,6))
points(1:4,unlist(ecofun1), pch=1, col="black",cex=2)
source('~/Dropbox/Variability approach JP/Scripts/JHP_H1_plot.R', echo=TRUE)
y_min <- min(c(min(b_ecofun1),min(b_stress1)))
y_max <- max(c(max(b_ecofun1),max(b_stress1)))
plot(c(unlist(ecofun1),unlist(stress1)),ylim=c(y_min,y_max),xlim=c(0,5),type="n",axes=F,xlab="",ylab="")
#axis(2, at=c)
axis(1, at=c(1,2,3,4), labels=c("gam_CV","alpha_CV","beta1","beta2"))
axis(2, at=c(1,2,3,4,5,6))
#ECOFUN
points(1:4,unlist(ecofun1), pch=1, col="black",cex=2)
points(c(1.3,2.3,3.3,4.3),unlist(stress1), pch=19, col="black",cex=2)
points(c(1.5,2.5,3.5,4.5),colMeans(j_stress1), pch=19, col="black",cex=2)
points(c(1.5,2.5,3.5,4.5),colMeans(j_stress1), pch=19, col="gray",cex=2)
#ECOFUN
arrows(1:4,unlist(ecofun1),1:4,c(quantile(b_ecofun1[,1],.025),quantile(b_ecofun1[,2],.025),quantile(b_ecofun1[,3],.025),quantile(b_ecofun1[,4],.025)),length=0.05, angle=90, code=2)
arrows(1:4,unlist(ecofun1),1:4,c(quantile(b_ecofun1[,1],.975),quantile(b_ecofun1[,2],.975),quantile(b_ecofun1[,3],.975),quantile(b_ecofun1[,4],.975)),length=0.05, angle=90, code=2)
#STRESS
arrows(c(1.3,2.3,3.3,4.3),unlist(stress1),c(1.3,2.3,3.3,4.3),c(quantile(b_stress1[,1],.025),quantile(b_stress1[,2],.025),quantile(b_stress1[,3],.025),quantile(b_stress1[,4],.025)),length=0.05, angle=90, code=2)
arrows(c(1.3,2.3,3.3,4.3),unlist(stress1),c(1.3,2.3,3.3,4.3),c(quantile(b_stress1[,1],.975),quantile(b_stress1[,2],.975),quantile(b_stress1[,3],.975),quantile(b_stress1[,4],.975)),length=0.05, angle=90, code=2)
points(1:4,unlist(ecofun1), pch=1, col="black",cex=2)
points(c(1.2,2.2,3.2,4.2),colMeans(j_ecofun1), pch=19, col="gray",cex=2)
points(c(1.4,2.4,3.3,4.4),unlist(stress1), pch=19, col="black",cex=2)
points(c(1.6,2.6,3.6,4.6),colMeans(j_stress1), pch=19, col="gray",cex=2)
### Plot ECOFUN and STRESS variability partition results and bootstrap values
y_min <- min(c(min(b_ecofun1),min(b_stress1)))
y_max <- max(c(max(b_ecofun1),max(b_stress1)))
plot(c(unlist(ecofun1),unlist(stress1)),ylim=c(y_min,y_max),xlim=c(0,5),type="n",axes=F,xlab="",ylab="")
#axis(2, at=c)
axis(1, at=c(1,2,3,4), labels=c("gam_CV","alpha_CV","beta1","beta2"))
axis(2, at=c(1,2,3,4,5,6))
#ECOFUN
points(1:4,unlist(ecofun1), pch=1, col="black",cex=2)
points(c(1.2,2.2,3.2,4.2),colMeans(j_ecofun1), pch=19, col="gray",cex=2)
#STRESS
points(c(1.4,2.4,3.3,4.4),unlist(stress1), pch=19, col="black",cex=2)
points(c(1.6,2.6,3.6,4.6),colMeans(j_stress1), pch=19, col="gray",cex=2)
#ECOFUN
arrows(1:4,unlist(ecofun1),1:4,c(quantile(b_ecofun1[,1],.025),quantile(b_ecofun1[,2],.025),quantile(b_ecofun1[,3],.025),quantile(b_ecofun1[,4],.025)),length=0.05, angle=90, code=2)
arrows(1:4,unlist(ecofun1),1:4,c(quantile(b_ecofun1[,1],.975),quantile(b_ecofun1[,2],.975),quantile(b_ecofun1[,3],.975),quantile(b_ecofun1[,4],.975)),length=0.05, angle=90, code=2)
#STRESS
arrows(c(1.4,2.4,3.4,4.4),unlist(stress1),c(1.4,2.4,3.4,4.4),c(quantile(b_stress1[,1],.025),quantile(b_stress1[,2],.025),quantile(b_stress1[,3],.025),quantile(b_stress1[,4],.025)),length=0.05, angle=90, code=2)
arrows(c(1.4,2.4,3.4,4.4),unlist(stress1),c(1.3,2.3,3.3,4.3),c(quantile(b_stress1[,1],.975),quantile(b_stress1[,2],.975),quantile(b_stress1[,3],.975),quantile(b_stress1[,4],.975)),length=0.05, angle=90, code=2)
### Plot ECOFUN and STRESS variability partition results and bootstrap values
y_min <- min(c(min(b_ecofun1),min(b_stress1)))
y_max <- max(c(max(b_ecofun1),max(b_stress1)))
plot(c(unlist(ecofun1),unlist(stress1)),ylim=c(y_min,y_max),xlim=c(0,5),type="n",axes=F,xlab="",ylab="")
#axis(2, at=c)
axis(1, at=c(1,2,3,4), labels=c("gam_CV","alpha_CV","beta1","beta2"))
axis(2, at=c(1,2,3,4,5,6))
#ECOFUN
points(1:4,unlist(ecofun1), pch=1, col="black",cex=2)
#STRESS
points(c(1.3,2.3,3.3,4.3),unlist(stress1), pch=19, col="black",cex=2)
#ECOFUN
arrows(1:4,unlist(ecofun1),1:4,c(quantile(b_ecofun1[,1],.025),quantile(b_ecofun1[,2],.025),quantile(b_ecofun1[,3],.025),quantile(b_ecofun1[,4],.025)),length=0.05, angle=90, code=2)
arrows(1:4,unlist(ecofun1),1:4,c(quantile(b_ecofun1[,1],.975),quantile(b_ecofun1[,2],.975),quantile(b_ecofun1[,3],.975),quantile(b_ecofun1[,4],.975)),length=0.05, angle=90, code=2)
#STRESS
arrows(c(1.3,2.3,3.3,4.3),unlist(stress1),c(1.3,2.3,3.3,4.3),c(quantile(b_stress1[,1],.025),quantile(b_stress1[,2],.025),quantile(b_stress1[,3],.025),quantile(b_stress1[,4],.025)),length=0.05, angle=90, code=2)
arrows(c(1.3,2.3,3.3,4.3),unlist(stress1),c(1.3,2.3,3.3,4.3),c(quantile(b_stress1[,1],.975),quantile(b_stress1[,2],.975),quantile(b_stress1[,3],.975),quantile(b_stress1[,4],.975)),length=0.05, angle=90, code=2)
legend(0,5,pch=c(1,19),col="black",legend=c("ECOFUN","STRESS"),bty="n",cex=1.5)
q()
(12/365)/(20/365)
35/365
38/100
.26/.48
.26/.38
.1/.3
3/5
.7*.5
.35/.6
.04/.06
(495+190)/10000
.95*.01
.01-.0095
.0005+.0095
.095*.99
.05*.99
.95*.99
.0095+.0495
.0005+.9405
.059+.941
.0095/.059
.0095/.95
.99*.05
.0095+.0495
1-.-59
1-.059
q()
##D&D 1999 competition
x <- .001
y <- seq(0,1,.00001)
width <- 40
C <- rep(NA,length(y))
for(i in 1:length(y)){
C[i] <- exp(-((x-y[i])^2)/(2*width^2))
}
plot(y,C,pch=19,col="gray")
plot(alpha,W)
dx <- (x-y[i])^2
plot(dx,C)
dx <- (x-y)^2
plot(dx,C)
dx <- (x-y)
plot(dx,C)
x <- .001
y <- seq(-1,0,1,.00001)
y <- seq(-1,1,.00001)
width <- 40
C <- rep(NA,length(y))
for(i in 1:length(y)){
C[i] <- exp(-((x-y[i])^2)/(2*width^2))
}
dx <- (x-y)
plot(dx,C)
##Johansson 2007
ui <- .5
uj <- seq(0,1,.00001)
width <- 40
alpha <- rep(NA,length(uj))
for(i in 1:length(uj)){
alpha[i] <- (1+((ui-uj[i])^2)/(2*width^2))^-1
}
plot(y,C,pch=19,col="gray")
points(uj,alpha,cex=.25)
ui <- .5
uj <- seq(.1,1,.00001)
width <- 40
alpha <- rep(NA,length(uj))
for(i in 1:length(uj)){
alpha[i] <- (1+((ui-uj[i])^2)/(2*width^2))^-1
}
dx <- ui-uj
plot(dx,alpha,pch=19,col="gray")
ui <- .5
uj <- seq(-1,1,.00001)
width <- 40
alpha <- rep(NA,length(uj))
for(i in 1:length(uj)){
alpha[i] <- (1+((ui-uj[i])^2)/(2*width^2))^-1
}
dx <- ui-uj
plot(dx,alpha,pch=19,col="gray")
ui <- .001
uj <- seq(-1,1,.00001)
width <- 40
alpha <- rep(NA,length(uj))
for(i in 1:length(uj)){
alpha[i] <- (1+((ui-uj[i])^2)/(2*width^2))^-1
}
dx <- ui-uj
plot(dx,alpha,pch=19,col="gray")
x <- .001
y <- seq(-1,1,.00001)
width <- 40
C <- rep(NA,length(y))
for(i in 1:length(y)){
C[i] <- exp(-((x-y[i])^2)/(2*width^2))
}
dx <- (x-y)
ui <- .001
uj <- seq(-1,1,.00001)
width <- 40
alpha <- rep(NA,length(uj))
for(i in 1:length(uj)){
alpha[i] <- (1+((ui-uj[i])^2)/(2*width^2))^-1
}
ddx <- ui-uj
plot(dx,C,pch=19,col="gray")
points(ddx,alpha,cex=.25)
abs(-5)
x <- .001
y <- seq(-1,1,.00001)
width <- 40
p <- 1.8
C <- rep(NA,length(y))
for(i in 1:length(y)){
C[i] <- exp(-abs((x-y)/width)^p)
}
x <- .001
y <- seq(-1,1,.00001)
width <- 40
p <- 1.8
C <- rep(NA,length(y))
for(i in 1:length(y)){
C[i] <- exp(-abs((x-y[i])/width)^p)
}
points((x-y),C,cex=.25,col="red")
x <- .001
y <- seq(-1,1,.00001)
width <- 40
p <- 2
C <- rep(NA,length(y))
for(i in 1:length(y)){
C[i] <- exp(-abs((x-y[i])/width)^p)
}
points((x-y),C,cex=.25,col="green")
##Fielding 2017
x <- .001
y <- seq(-1,1,.00001)
width <- 40
p <- 1
C <- rep(NA,length(y))
for(i in 1:length(y)){
C[i] <- exp(-abs((x-y[i])/width)^p)
}
dx <- (x-y)
points((x-y),C,cex=.25,col="blue")
install.packages("bayesm")
?bayesm
library(bayesm)
?bayesm
?runireg
?rivDP
?runiregGibbs
?rsurGibbs
?rmnpGibbs
q()
library(BayesFactor)
citation(BayesFactor)
citation("BayesFactor")
q()
q()
?dapt
?adapt
library(rjags)
?adapt
q()
?predict
?lm
?predict.lm
x <- rnorm(15)
y <- x + rnorm(15)
predict(lm(y ~ x))
new <- data.frame(x = seq(-3, 3, 0.5))
predict(lm(y ~ x), new, se.fit = TRUE)
pred.w.plim <- predict(lm(y ~ x), new, interval = "prediction")
pred.w.clim <- predict(lm(y ~ x), new, interval = "confidence")
matplot(new$x, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
plot(new$x)
plot(pred.w.clim,add=T,type="l")
plot(new$x,type="l")
?lines
lines(pred.w.clim)
plot(new$x)
lines(pred.w.clim)
?matplot
matplot(new$x, pred.w.clim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$x, pred.w.clim,type = "l", ylab = "predicted y")
## Predictions
x <- rnorm(15)
y <- x + rnorm(15)
predict(lm(y ~ x))
new <- data.frame(x = seq(-3, 3, 0.5))
predict(lm(y ~ x), new, se.fit = TRUE)
pred.w.clim <- predict(lm(y ~ x), new, interval = "confidence")
matplot(new$x, pred.w.clim, type = "l", ylab = "predicted y")
points(x,y)
q()
dir_rest <- "/Users/jhpantel/Dropbox/JP_LG/JHP_Sarah_Space_Paper/scripts/bayesian_lm"
load(paste(dir_rest,"/load.RData",sep=""))
View(abs_delta_T)
Y <- dt_amat[is.na(st_TCnoD$amat) == F]
sub <- community_subset[,3:10]
dt_amat <- scale(log(abs_delta_T$amat))
dt_lmat <- scale(log(abs_delta_T$lmat))
dt_c1 <- scale(log(abs_delta_T$c1))
##Generate predictor variables
#DE, environmental distance
DE <- scale(environment[,3:14])
rownames(DE) <- environment$Pond
DE <- rbind(DE,colMeans(DE))
rownames(DE)[21] <- "avg"
DE <- as.matrix(dist(DE))
DE <- DE[1:20,21]
library(vegan)
DS <- diversity(community[,c(3:8,10:21)],"simpson")
#DC as average distance to other sites
mat <- matrix(0, 20, 20)
mat[row(mat) < col(mat)] <- scan(paste(dir_rest,"/site_dist.txt",sep=""))
diag(mat) <- NA
mat[upper.tri(mat)] <- t(mat[upper.tri(mat)])
mat[lower.tri(mat)] <- t(mat)[lower.tri(mat)]
DC <- rep(NA,20)
for(i in 1:20){
DC[i] <- mean(mat[,i],na.rm=T)
}
DC <- apply(mat,2,function(x) min(x,na.rm=TRUE))
blah <- read.table(paste(dir_rest,"/covariates.txt",sep=""), header=T,colClasses=c("NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL",NA))
HE <- blah$He
##Transform and standardize predictor variables
st_DE <- scale(log(DE)) #ln transform
st_DS <- DS #no transform...wanted to logit transform, but one site = 0 logit transform
st_DC <- scale(log10(DC))
st_HE <- scale(HE) #no transform for now, but ask Lynn what this was again
st_TCnoD <- as.data.frame(scale(Tc_noD))
mod <- lm(dt_amat[is.na(st_TCnoD$amat) == F] ~ st_DE[is.na(st_TCnoD$amat) == F] + I((st_DS[is.na(st_TCnoD$amat) == F])^2) + st_DC[is.na(st_TCnoD$amat) == F] + st_HE[is.na(st_TCnoD$amat) == F] + st_TCnoD$amat[is.na(st_TCnoD$amat) == F])
summary(mod)
mod <- lm(dt_amat[is.na(st_TCnoD$amat) == F] ~ st_DE[is.na(st_TCnoD$amat) == F] + I((st_DS[is.na(st_TCnoD$amat) == F])^2) + st_DC[is.na(st_TCnoD$amat) == F] + st_HE[is.na(st_TCnoD$amat) == F] + st_TCnoD$amat[is.na(st_TCnoD$amat) == F])
mod_amat <- lm(dt_amat[is.na(st_TCnoD$amat) == F] ~ st_DE[is.na(st_TCnoD$amat) == F] + I((st_DS[is.na(st_TCnoD$amat) == F])^2) + st_DC[is.na(st_TCnoD$amat) == F] + st_HE[is.na(st_TCnoD$amat) == F] + st_TCnoD$amat[is.na(st_TCnoD$amat) == F])
mod_c1 <- lm(dt_c1[is.na(st_TCnoD$c1) == F] ~ st_DE[is.na(st_TCnoD$c1) == F] + I((st_DS[is.na(st_TCnoD$amat) == F])^2) + st_DC[is.na(st_TCnoD$amat) == F] + st_HE[is.na(st_TCnoD$amat) == F] + st_TCnoD$amat[is.na(st_TCnoD$amat) == F])
summary(mod_c1)
q()
load("~/OneDrive/Documents/CNRS/pantel_work/2015_model_run/for_manuscript/1_metapopulation_manuscript/covar/all_sites/results/covar_analysis_results_v04.RData")
dimnames(site)
obs_site[,1]
obs_site[,3]
site_coord_pstar[,3]
dim(site_coord_pstar)
head(site_coord_pstar)
site_coord_pstar[,3+5]
head(psi)
#Occurence z data
mat_mean <- function(dat){
blah <- matrix(dat, nrow=278, ncol=15, byrow=F)
blah <- as.data.frame(blah)
blah <- data.matrix(blah)
result <- rowMeans(blah)
return(result)
}
psi <- array(NA, dim=c(278,num_spec), dimnames=list(NULL,spec))
z<-1
load(paste("/Users/jhpantel/OneDrive/Documents/CNRS/pantel_work/2015_model_run/for_manuscript/1_metapopulation_manuscript/covar/all_sites/",dir[z],"/",spec[z],"/jsample.RData", sep=""))
df=as.data.frame(rbind(jsample.full[[1]],jsample.full[[2]],jsample.full[[3]]))
df <- df[,34:4203]
occupy <- apply(df, 1, mat_mean)
psi[,z] <- rowMeans(occupy)
head(psi)
psi <- array(NA, dim=c(278,num_spec), dimnames=list(NULL,spec))
for(z in 1:num_spec){
#Load results file
load(paste("/Users/jhpantel/OneDrive/Documents/CNRS/pantel_work/2015_model_run/for_manuscript/1_metapopulation_manuscript/covar/all_sites/",dir[z],"/",spec[z],"/jsample.RData", sep=""))
#Get z estimates
df=as.data.frame(rbind(jsample.full[[1]],jsample.full[[2]],jsample.full[[3]]))
df <- df[,34:4203]
#Extract mean
occupy <- apply(df, 1, mat_mean)
psi[,z] <- rowMeans(occupy)
#pr_occupied[z,,2:3] <- t(apply(occupy, 1, function(x) quantile(x, probs=c(.025,.975))))
}
order
ordered
spec[ordered]
detect
i <- 6
S <- matrix(scan(paste("/Users/jhpantel/OneDrive/Documents/CNRS/pantel_work/2015_model_run/for_manuscript/1_metapopulation_manuscript/covar/all_sites/results/",spec[i],"/state.txt", sep=""),n = 278*15,skip=1),278,15,byrow = TRUE)
View(S)
3429-69
3593-3429
278*15
sum(S == 1 | S == 2)
4170-3593
sum(S==0)
4170-836
setwd("~/OneDrive/Documents/CNRS/pantel_work/2015_model_run/for_manuscript/1_metapopulation_manuscript/covar/all_sites/results/6_Aplexa_marmorata")
dry <- matrix(scan("dry_final.txt", n = 278*15,skip=1), 278, 15, byrow = TRUE)
dry(dry==1 | dry==2)
dry[dry==1 | dry==2]
sum(dry[dry==1 | dry==2])
3688-69
sum(dry[dry==0])
sum(dry==0)
4170-577
2044/3593
detect
sum(dry > 0)
sum(dry == 1 | dry==2)
sum(S==1 | S==2)
psi <- psi-1  #Gives the percentage of years (across all JAGS iterations) that each site is occupied
write.csv(psi,file="/Users/jhpantel/Desktop/param_psi_bysite.csv",row.names=F)
site[z,1,,,1]
dim(site)
dimnames(site)[2]
dimnames(site)[5]
z<-6
write.csv(site[z,2,,,2],file=paste("/Users/jhpantel/Desktop/",spec[z],"_site_all_covar_eD.csv",sep=""),row.names=F)
z<-12
write.csv(site[z,2,,,2],file=paste("/Users/jhpantel/Desktop/",spec[z],"_site_all_covar_eD.csv",sep=""),row.names=F)
blah <- site[z,2,,,2]
View(blah)
z<-6
write.csv(site[z,2,,,1],file=paste("/Desktop/",spec[z],"_site_all_covar_eW.csv",sep=""),row.names=F)
write.csv(site[z,2,,,1],file=paste("/Users/jhpantel/Desktop/",spec[z],"_site_all_covar_eW.csv",sep=""),row.names=F)
z<-12
write.csv(site[z,2,,,1],file=paste("/Users/jhpantel/Desktop/",spec[z],"_site_all_covar_eW.csv",sep=""),row.names=F)
dimnames(site)[5]
q()
