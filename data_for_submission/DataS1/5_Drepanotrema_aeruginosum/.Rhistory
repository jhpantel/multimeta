#Get z estimates
df=as.data.frame(rbind(jsample.full[[1]],jsample.full[[2]],jsample.full[[3]]))
df <- df[,34:4203]
#Extract mean
occupy <- apply(df, 1, mat_mean)
pr_occupied[z,,1] <- rowMeans(occupy)
pr_occupied[z,,2:3] <- t(apply(occupy, 1, function(x) quantile(x, probs=c(.025,.975))))
}
dry <- matrix(scan("/Users/jhpantel/OneDrive/Documents/CNRS/pantel_work/2015_model_run/multi_species_covar/new_z_init/1_Gundlachia_radiata/dry_final.txt",n = 278*15,skip=1), 278, 15, byrow = TRUE)
#Convert all to probability that a site is wet
X <- matrix(NA, nrow(dry), ncol(dry))
X[dry==1]=1
X[dry==2]=0
X[dry > 0 & dry < 1] <- dry[dry > 0 & dry < 1]
num_wet <- colSums(X, na.rm=T)
#Pre-allocate variable to hold each species observed Pr_occurence each year. This takes into account the number of sites that are wet as well as the detection probability
obs_occupied <- array(NA, dim=c(num_spec,15), dimnames=list(spec,NULL))
#for(z in 1:num_spec){
for(z in c(1,3,7,9,11,13:17)){
##Import detected data
# state matrix
# 0 = non visited site or missing data
# 1 = species not detected (i.e., either dry or wet site)
# 2 = species detected (i.e., necessarily a wet site)
S <- matrix(scan(paste("/Users/jhpantel/OneDrive/Documents/CNRS/pantel_work/2015_model_run/multi_species_covar/new_z_init/", spec[z], "/state.txt", sep=""),n = 278*15,skip=1), 278, 15, byrow = TRUE)
#The number of sites the species is observed in each year
present <- apply(S, 2, function(x) sum(x==2))
#The number of sites the species is observed in divided by the number of wet sites (including Pr(wet))
obs_pr_obs <- present / num_wet
#Multiply this by the probability of being detected in a wet site
obs_occupied[z,] <- obs_pr_obs / full[z,33,1]
}
mod_plot <- function(obs, mod, spe){
mod <- mod-1
plot(mod[,1], type="n", ylim=c(0,1), xaxt="n", yaxt="n",xlab="year",ylab="Pr(occupied)",main="")
title(main=spec[spe])
axis(1, at=1:15, labels=gsub("X", '', colnames(obs)), las=1)
axis(2, at=c(0,.25,.5,.75,1), las=1)
points(1:15,mod[,1],pch=1,col="black",cex=2)
arrows(1:15, mod[,1], 1:15, mod[,2], length=0.05, angle=90, code=2, lwd=3, col="black")
arrows(1:15, mod[,1], 1:15, mod[,3], length=0.05, angle=90, code=2, lwd=3, col="black")
points(1:15,obs,pch=19,col="black",cex=2)
}
#for(z in 1:num_spec){
for(z in c(1,3,7,9,11,13:17)){
svg(file=paste("/Users/jhpantel/OneDrive/Documents/CNRS/pantel_work/2015_model_run/multi_species_covar/new_z_init/results/z_plot/", spec[z], "_zplot.svg", sep=""), width=7, height=4)
mod_plot(obs_occupied[z,], pr_occupied[z,,],z)
dev.off()
}
q()
q()
library(vegan)
library(reshape)
comm.data<-read.csv("/Users/jhpantel/Dropbox/Jessie niche paper/SDM/co-occurrence-master/data/total_order_info.csv")
comm.data<-read.csv("/Users/jhpantel/Dropbox/Jessie niche paper/SDM/JHP_co-occurrence-master/data/total_order_info.csv")
comm.data<-comm.data[,-1]
comm.data.read<-subset(comm.data, reads >= 1407)
#rarified to 1407 here for order
comm.data<-cbind(comm.data.read[,c(1:4)],rrarefy(comm.data.read[,-c(1:4)],1407))
trts<-as.vector((unique((comm.data$rep))))
trts<-trts[-c(4,5)]
results<-matrix(nrow=0,ncol=7)
options(warnings=-1)
for(a in 1:length(trts)){
#pull the first element from the vector of treatments
trt.temp<-trts[a]
#subset the dataset for those treatments
temp<-subset(comm.data, rep==trt.temp)
#in this case the community data started at column 6, so the loop for co-occurrence has to start at that point
for(b in 6:(dim(temp)[2]-1)){
#every species will be compared to every other species, so there has to be another loop that iterates down the rest of the columns
for(c in (b+1):(dim(temp)[2])){
#summing the abundances of species of the columns that will be compared
species1.ab<-sum(temp[,b])
species2.ab<-sum(temp[,c])
#if the column is all 0's no co-occurrence will be performed
if(species1.ab >1 & species2.ab >1){
test<-cor.test(temp[,b],temp[,c],method="spearman",na.action=na.rm)
rho<-test$estimate
p.value<-test$p.value
}
if(species1.ab <=1 | species2.ab <= 1){
rho<-0
p.value<-1
}
new.row<-c(trts[a],names(temp)[b],names(temp)[c],rho,p.value,species1.ab,species2.ab)
results<-rbind(results,new.row)
}
}
print(a/length(trts))
}
q()
q()
spec <- c("1_Gundlachia_radiata", "2_Drepanotrema_lucidum", "3_Drepanotrema_depressissimum", "4_Drepanotrema_cimex", "5_Drepanotrema_aeruginosum", "6_Aplexa_marmorata", "7_Physa_acuta", "8_Lymnaea_columella", "9_Lymnaea_cubensis", "10_Plesiophysa_guadeloupensis", "11_Biomphalaria_straminea", "12_Biomphalaria_glabrata", "13_Biomphalaria_schrammi", "14_Pomacea_glauca", "15_Pyrgophorus_coronatus", "16_Marisa_cornuarietis", "17_Melanoides_tuberculata_PAP", "18_Melanoides_tuberculata_GOS", "19_Melanoides_tuberculata_FAL", "20_Melanoides_tuberculata_MAD", "21_Melanoides_tuberculata_CPF", "22_Melanoides_tuberculata_SEN", "23_Tarebia_granifera", "24_Neritina_virginea", "25_Eupera_viridans", "26_Indoplanorbis_exustus", "27_Helisoma_duryi")
param <- c("phiW", "phiD", "cW", "cD", "b_phiW_size", "b_phiW_veg", "b_phiW_stability", "b_phiW_lrs", "b_phiW_mangrove", "b_phiW_river", "b_cW_size", "b_cW_veg", "b_cW_stability", "b_cW_connec", "b_cW_rs", "b_cW_colsource", "b_cW_mangrove", "b_cW_river", "g_phiW_size", "g_phiW_veg", "g_phiW_stability", "g_phiW_lrs", "g_phiW_mangrove", "g_phiW_river", "g_cW_size", "g_cW_veg", "g_cW_stability", "g_cW_connec", "g_cW_rs", "g_cW_colsource", "g_cW_mangrove", "g_cW_river", "pW")
#Pre-allocate a variable to hold results of Bayesian model
num_spec <- length(spec)
num_param <- length(param)
full <- array(NA, dim=c(num_spec,num_param,4), dimnames=list(spec, param, c("Mean","2_5","97_5","n")))
library(rjags)
z<-4
load(paste("/Users/jhpantel/OneDrive/Documents/CNRS/pantel_work/2015_model_run/for_manuscript/1_metapopulation_manuscript/covar/reduced_sites/results/", spec[z], "/jsample.RData", sep=""))
df=as.data.frame(rbind(jsample.full[[1]][,1:33],jsample.full[[2]][,1:33],jsample.full[[3]][,1:33]))
#Mean, CI, and n when beta values when gamma = 1
for(i in 5:18){
sub <- df[df[,i+14] == 1,i]
full[z,i,1] <- mean(sub)
full[z,i,2:3] <- quantile(sub, probs=c(.025,.975))
full[z,i,4] <- length(sub)
}
sub <- df[,c(1:4,33)]
head(sub)
dimnames(full)$2
dimnames(full)[[2]]
logit_to_prob <- function(x){
ret <- exp(x) / (1+exp(x))
return(ret)
}
for(z in c(4,5,9,12,14:18,20,25)){
#Load results file
load(paste("/Users/jhpantel/OneDrive/Documents/CNRS/pantel_work/2015_model_run/for_manuscript/1_metapopulation_manuscript/covar/reduced_sites/results/", spec[z], "/jsample.RData", sep=""))
#load(paste("C:/Users/adminlocal/OneDrive/Documents/CNRS/pantel_work/2015_model_run/multi_species_covar/final/", spec[z], "/jsample.RData", sep=""))
df=as.data.frame(rbind(jsample.full[[1]][,1:33],jsample.full[[2]][,1:33],jsample.full[[3]][,1:33]))
#Mean, CI, and n when beta values when gamma = 1
for(i in 5:18){
sub <- df[df[,i+14] == 1,i]
full[z,i,1] <- mean(sub)
full[z,i,2:3] <- quantile(sub, probs=c(.025,.975))
full[z,i,4] <- length(sub)
}
#Mean and CI values for alpha and pW parameters
sub <- df[,c(1:4,33)]
sub$`alpha[1]` <- logit_to_prob(sub$`alpha[1]`)
sub$`alpha[2]` <- logit_to_prob(sub$`alpha[2]`)
sub$`alpha[3]` <- exp(sub$`alpha[2]`)
full[z,c(1:4,33),1] <- apply(sub,2,mean)
full[z,c(1:4,33),2:3] <- t(apply(sub,2,function(x) quantile(x,probs=c(.025,.975))))
#Extract proportion of models that included covariates via SVSS
#Remove non-gamma parameters from jsample MCMC object
sub <- df[,19:32]
nbMCMC <- nrow(sub)
full[z,19:32,1] <- apply(sub,2,function(x) sum(x==1)/nbMCMC)
}
dimnames(full)[[2]]
full[,1,]
full[,2,]
full[,3,]
dimnames(df)
dimnames(sub)
z <- 16
load(paste("/Users/jhpantel/OneDrive/Documents/CNRS/pantel_work/2015_model_run/for_manuscript/1_metapopulation_manuscript/covar/reduced_sites/results/", spec[z], "/jsample.RData", sep=""))
df=as.data.frame(rbind(jsample.full[[1]][,1:33],jsample.full[[2]][,1:33],jsample.full[[3]][,1:33]))
for(i in 5:18){
sub <- df[df[,i+14] == 1,i]
full[z,i,1] <- mean(sub)
full[z,i,2:3] <- quantile(sub, probs=c(.025,.975))
full[z,i,4] <- length(sub)
}
sub <- df[,c(1:4,33)]
head(sub)
full <- array(NA, dim=c(num_spec,num_param,4), dimnames=list(spec, param, c("Mean","2_5","97_5","n")))
for(z in c(4,5,9,12,14:18,20,25)){
#Load results file
load(paste("/Users/jhpantel/OneDrive/Documents/CNRS/pantel_work/2015_model_run/for_manuscript/1_metapopulation_manuscript/covar/reduced_sites/results/", spec[z], "/jsample.RData", sep=""))
#load(paste("C:/Users/adminlocal/OneDrive/Documents/CNRS/pantel_work/2015_model_run/multi_species_covar/final/", spec[z], "/jsample.RData", sep=""))
df=as.data.frame(rbind(jsample.full[[1]][,1:33],jsample.full[[2]][,1:33],jsample.full[[3]][,1:33]))
#Mean, CI, and n when beta values when gamma = 1
for(i in 5:18){
sub <- df[df[,i+14] == 1,i]
full[z,i,1] <- mean(sub)
full[z,i,2:3] <- quantile(sub, probs=c(.025,.975))
full[z,i,4] <- length(sub)
}
#Mean and CI values for alpha and pW parameters
sub <- df[,c(1:4,33)]
sub$`alpha[1]` <- logit_to_prob(sub$`alpha[1]`)
sub$`alpha[2]` <- logit_to_prob(sub$`alpha[2]`)
sub$`alpha[3]` <- exp(sub$`alpha[3]`)
full[z,c(1:4,33),1] <- apply(sub,2,mean)
full[z,c(1:4,33),2:3] <- t(apply(sub,2,function(x) quantile(x,probs=c(.025,.975))))
#Extract proportion of models that included covariates via SVSS
#Remove non-gamma parameters from jsample MCMC object
sub <- df[,19:32]
nbMCMC <- nrow(sub)
full[z,19:32,1] <- apply(sub,2,function(x) sum(x==1)/nbMCMC)
}
full[z,3,]
full[,3,]
rm(list=ls())
setwd("~/OneDrive/Documents/CNRS/pantel_work/2015_model_run/for_manuscript/1_metapopulation_manuscript/no_covar/all_sites/results/5_Drepanotrema_aeruginosum")
dry <- matrix(scan("dry_final.txt", n = 278*15,skip=1), 278, 15, byrow = TRUE)
S <- matrix(scan("state.txt", n = 278*15,skip=1), 278, 15, byrow = TRUE)
# matrixes of visits and repeated visits within the same occasion
# correspond  to two 280*15 matrices (sites by year)
# first eleven rows correspond to visits
# next eleven rows correspond to repeated visits within the same occasion
presence <- matrix(scan("presence.txt", n = 278*30,skip=1), 278, 30, byrow = TRUE)
y <- structure(presence,.Dim = c(278L,15L,2L))
# number of sites
nsite<-dim(y)[1]
# number de repetitions
nrep<-2
# number of visits to sites
nyear<-15
############################################################
e <- NULL
for (i in 1:nsite)
{
temp <- 1:nyear
tempo <- min(temp[S[i,]==1],temp[S[i,]==2],temp[S[i,]==3])
e <- c(e,tempo)
}
############################################################
# compute the year a site is last visited                  #
############################################################
fin <- NULL
for (i in 1:nsite)
{
temp <- 1:nyear
tempo <- max(temp[S[i,]==1],temp[S[i,]==2],temp[S[i,]==3])
fin <- c(fin,tempo)
}
##############################
# compute X(t)               #
##############################
# X(t) = 1 if a site is in state D
# X(t) = 0 if a site is in state W or not visited
#X <- matrix(0,nsite,ncol(S))
#X[dry==2]=1
X <- matrix(0,nsite,ncol(S))
X[dry==2]=1
#Include state uncertanity for some sites, give Pr(dry)
X[dry > 0 & dry < 1] <- 1 - dry[dry > 0 & dry < 1]
Zst<- S
# Winbugs g?re pas les 0, il faut les remplacer par des NA dans Zst et dans les donn?es
Zst[(Zst == 0)] <- NA
y[y==0]=NA
# donn?es
mydatax <- list (y=y,nsite=nsite,nrep=nrep,nyear=nyear,e=e,X=X,fin=fin)
# nb d'it?rations
ni=1000
# nb burn-in
nb=100
# nb thin
nt=1
# nb de chaines ? lancer en //
nc=3
# charger jags depuis R
library(rjags)
library(coda)
##Add at least one presence each year for initial Zst
GT_list <- apply(Zst[1:250,],2,function(x) max(unique(x),na.rm=T)==2)
MG_list <- apply(Zst[251:278,],2,function(x) max(unique(x),na.rm=T)==2)
list <- cbind(GT_list,MG_list)
list
for (i in 1:2){ #For each island...
if (length(which(list[,i]==F)) > 0){ #If the species is missing in any year
for (q in 1:sum(list[,i]==F)){ #For each year without that species present...
if (i==1){Zst[sample(1:250,1),which(list[,i]==F)[q]] <- 2}
else {Zst[sample(251:278,1),which(list[,i]==F)[q]] <- 2}
}
}
}
init1 <- list(pM=.1,psiGT = 0.1,psiMG = 0.1,beta=c(0.1,0.1,0.1,NA),z=Zst)
init2 <- list(pM=.5,psiGT = 0.5,psiMG = 0.5,beta=c(0.5,0.5,0.5,NA),z=Zst)
init3 <- list(pM=.9,psiGT = 0.9,psiMG = 0.9,beta=c(.9,.9,.9,NA),z=Zst)
inits <- list (init1,init2,init3)
parameters <- c("pM","beta","z")
start2<-as.POSIXlt(Sys.time())
jmodel.full <- jags.model("model_full.txt", mydatax, inits, n.chains = nc,n.adapt = nb)
jsample.full <- coda.samples(jmodel.full, parameters, n.iter=ni, thin = nt)
end2 <-as.POSIXlt(Sys.time())
duration.full = end2-start2
Zst[276,]
S[276,]
max(S[,7])
max(S[,8])
View(S)
max(S[,5])
max(S[,6])
max(S[,7])
list
rm(list=ls())
setwd("~/OneDrive/Documents/CNRS/pantel_work/2015_model_run/for_manuscript/1_metapopulation_manuscript/no_covar/all_sites/results/5_Drepanotrema_aeruginosum")
#######################
# data loading        #
#######################
# matrix of site state
# 0 = non visited site or missing data
# 1 = site in state W (Wet)
# 2 = site in state D (Dry)
dry <- matrix(scan("dry_final.txt", n = 278*15,skip=1), 278, 15, byrow = TRUE)
# state matrix
# 0 = non visited site or missing data
# 1 = species not detected (i.e., either dry or wet site)
# 2 = species detected (i.e., necessarily a wet site)
S <- matrix(scan("state.txt", n = 278*15,skip=1), 278, 15, byrow = TRUE)
# matrixes of visits and repeated visits within the same occasion
# correspond  to two 280*15 matrices (sites by year)
# first eleven rows correspond to visits
# next eleven rows correspond to repeated visits within the same occasion
presence <- matrix(scan("presence.txt", n = 278*30,skip=1), 278, 30, byrow = TRUE)
y <- structure(presence,.Dim = c(278L,15L,2L))
# number of sites
nsite<-dim(y)[1]
# number de repetitions
nrep<-2
# number of visits to sites
nyear<-15
############################################################
# compute the year a site is first visited                 #
############################################################
e <- NULL
for (i in 1:nsite)
{
temp <- 1:nyear
tempo <- min(temp[S[i,]==1],temp[S[i,]==2],temp[S[i,]==3])
e <- c(e,tempo)
}
############################################################
# compute the year a site is last visited                  #
############################################################
fin <- NULL
for (i in 1:nsite)
{
temp <- 1:nyear
tempo <- max(temp[S[i,]==1],temp[S[i,]==2],temp[S[i,]==3])
fin <- c(fin,tempo)
}
##############################
# compute X(t)               #
##############################
# X(t) = 1 if a site is in state D
# X(t) = 0 if a site is in state W or not visited
#X <- matrix(0,nsite,ncol(S))
#X[dry==2]=1
X <- matrix(0,nsite,ncol(S))
X[dry==2]=1
#Include state uncertanity for some sites, give Pr(dry)
X[dry > 0 & dry < 1] <- 1 - dry[dry > 0 & dry < 1]
Zst<- S
# Winbugs g?re pas les 0, il faut les remplacer par des NA dans Zst et dans les donn?es
Zst[(Zst == 0)] <- NA
y[y==0]=NA
# donn?es
mydatax <- list (y=y,nsite=nsite,nrep=nrep,nyear=nyear,e=e,X=X,fin=fin)
# nb d'it?rations
ni=1000
# nb burn-in
nb=100
# nb thin
nt=1
# nb de chaines ? lancer en //
nc=3
# charger jags depuis R
library(rjags)
library(coda)
##############################
# run model FULL             #
init1 <- list(pM=.1,psiGT = 0.1,psiMG = 0.1,beta=c(0.1,0.1,0.1,NA),z=Zst)
init2 <- list(pM=.5,psiGT = 0.5,psiMG = 0.5,beta=c(0.5,0.5,0.5,NA),z=Zst)
init3 <- list(pM=.9,psiGT = 0.9,psiMG = 0.9,beta=c(.9,.9,.9,NA),z=Zst)
inits <- list (init1,init2,init3)
parameters <- c("pM","beta","z")
start2<-as.POSIXlt(Sys.time())
jmodel.full <- jags.model("model_full.txt", mydatax, inits, n.chains = nc,n.adapt = nb)
jsample.full <- coda.samples(jmodel.full, parameters, n.iter=ni, thin = nt)
end2 <-as.POSIXlt(Sys.time())
duration.full = end2-start2
GT_list <- apply(Zst[1:250,],2,function(x) max(unique(x),na.rm=T)==2)
MG_list <- apply(Zst[251:278,],2,function(x) max(unique(x),na.rm=T)==2)
list <- cbind(GT_list,MG_list)
list
Zst[251:278,]
blah <- Zst[251:278,]
View(blah)
View(Zst)
##Add at least one presence each year for initial Zst
GT_list <- apply(Zst[1:250,],2,function(x) max(unique(x),na.rm=T)==2)
MG_list <- apply(Zst[251:278,],2,function(x) max(unique(x),na.rm=T)==2)
list <- cbind(GT_list,MG_list)
for (i in 1:2){ #For each island...
if (length(which(list[,i]==F)) > 0){ #If the species is missing in any year
for (q in 1:sum(list[,i]==F)){ #For each year without that species present...
if (i==1){Zst[sample(1:250,1),which(list[,i]==F)[q]] <- 2}
else {Zst[sample(251:278,1),which(list[,i]==F)[q]] <- 2}
}
}
}
init1 <- list(pM=.1,psiGT = 0.1,psiMG = 0.1,beta=c(0.1,0.1,0.1,NA),z=Zst)
init2 <- list(pM=.5,psiGT = 0.5,psiMG = 0.5,beta=c(0.5,0.5,0.5,NA),z=Zst)
init3 <- list(pM=.9,psiGT = 0.9,psiMG = 0.9,beta=c(.9,.9,.9,NA),z=Zst)
inits <- list (init1,init2,init3)
parameters <- c("pM","beta","z")
start2<-as.POSIXlt(Sys.time())
jmodel.full <- jags.model("model_full.txt", mydatax, inits, n.chains = nc,n.adapt = nb)
jsample.full <- coda.samples(jmodel.full, parameters, n.iter=ni, thin = nt)
end2 <-as.POSIXlt(Sys.time())
duration.full = end2-start2
View(Zst)
View(S)
S <- matrix(scan("state.txt", n = 278*15,skip=1), 278, 15, byrow = TRUE)
Zst<- S
Zst[(Zst == 0)] <- NA
y[y==0]=NA
rm(list=ls())
#######################
# data loading        #
#######################
# matrix of site state
# 0 = non visited site or missing data
# 1 = site in state W (Wet)
# 2 = site in state D (Dry)
dry <- matrix(scan("dry_final.txt", n = 278*15,skip=1), 278, 15, byrow = TRUE)
# state matrix
# 0 = non visited site or missing data
# 1 = species not detected (i.e., either dry or wet site)
# 2 = species detected (i.e., necessarily a wet site)
S <- matrix(scan("state.txt", n = 278*15,skip=1), 278, 15, byrow = TRUE)
# matrixes of visits and repeated visits within the same occasion
# correspond  to two 280*15 matrices (sites by year)
# first eleven rows correspond to visits
# next eleven rows correspond to repeated visits within the same occasion
presence <- matrix(scan("presence.txt", n = 278*30,skip=1), 278, 30, byrow = TRUE)
y <- structure(presence,.Dim = c(278L,15L,2L))
# number of sites
nsite<-dim(y)[1]
# number de repetitions
nrep<-2
# number of visits to sites
nyear<-15
############################################################
# compute the year a site is first visited                 #
############################################################
e <- NULL
for (i in 1:nsite)
{
temp <- 1:nyear
tempo <- min(temp[S[i,]==1],temp[S[i,]==2],temp[S[i,]==3])
e <- c(e,tempo)
}
############################################################
# compute the year a site is last visited                  #
############################################################
fin <- NULL
for (i in 1:nsite)
{
temp <- 1:nyear
tempo <- max(temp[S[i,]==1],temp[S[i,]==2],temp[S[i,]==3])
fin <- c(fin,tempo)
}
##############################
# compute X(t)               #
##############################
# X(t) = 1 if a site is in state D
# X(t) = 0 if a site is in state W or not visited
#X <- matrix(0,nsite,ncol(S))
#X[dry==2]=1
X <- matrix(0,nsite,ncol(S))
X[dry==2]=1
#Include state uncertanity for some sites, give Pr(dry)
X[dry > 0 & dry < 1] <- 1 - dry[dry > 0 & dry < 1]
Zst<- S
# Winbugs g?re pas les 0, il faut les remplacer par des NA dans Zst et dans les donn?es
Zst[(Zst == 0)] <- NA
y[y==0]=NA
# donn?es
mydatax <- list (y=y,nsite=nsite,nrep=nrep,nyear=nyear,e=e,X=X,fin=fin)
# nb d'it?rations
ni=1000
# nb burn-in
nb=100
# nb thin
nt=1
# nb de chaines ? lancer en //
nc=3
# charger jags depuis R
library(rjags)
library(coda)
##############################
# run model FULL             #
##############################
# valeurs initiales
##Add at least one presence each year for initial Zst
GT_list <- apply(Zst[1:250,],2,function(x) max(unique(x),na.rm=T)==2)
MG_list <- apply(Zst[251:278,],2,function(x) max(unique(x),na.rm=T)==2)
list <- cbind(GT_list,MG_list)
for (i in 1:2){ #For each island...
if (length(which(list[,i]==F)) > 0){ #If the species is missing in any year
for (q in 1:sum(list[,i]==F)){ #For each year without that species present...
if (i==1){Zst[sample(1:250,1),which(list[,i]==F)[q]] <- 2}
else {Zst[sample(251:278,1),which(list[,i]==F)[q]] <- 2}
}
}
}
init1 <- list(pM=.1,psiGT = 0.1,psiMG = 0.1,beta=c(0.1,0.1,0.1,NA),z=Zst)
init2 <- list(pM=.5,psiGT = 0.5,psiMG = 0.5,beta=c(0.5,0.5,0.5,NA),z=Zst)
init3 <- list(pM=.9,psiGT = 0.9,psiMG = 0.9,beta=c(.9,.9,.9,NA),z=Zst)
inits <- list (init1,init2,init3)
parameters <- c("pM","beta","z")
start2<-as.POSIXlt(Sys.time())
jmodel.full <- jags.model("model_full.txt", mydatax, inits, n.chains = nc,n.adapt = nb)
jsample.full <- coda.samples(jmodel.full, parameters, n.iter=ni, thin = nt)
end2 <-as.POSIXlt(Sys.time())
duration.full = end2-start2
list
S[161,]
Zst[161,]
max(S[,3])
View(S)
max(S[1:250,3])
q()
